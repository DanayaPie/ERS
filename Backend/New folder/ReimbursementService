package com.revature.service;

import java.io.InputStream;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.revature.constant.UserRoleConstants;
import com.revature.dao.ReimbursementDAO;
import com.revature.dto.MessageDTO;
import com.revature.exception.InvalidParameterException;
import com.revature.exception.ReimbursementNotFoundException;
import com.revature.exception.ReimbursementReceiptNotFoundException;
import com.revature.exception.StatusNotFoundException;
import com.revature.exception.UnauthorizedException;
import com.revature.model.Reimbursement;
import com.revature.model.User;

import io.javalin.http.UploadedFile;

public class ReimbursementService {

	private Logger logger = LoggerFactory.getLogger(ReimbursementService.class);

	private ReimbursementDAO reimbDao;

	List<String> validStatusType = Arrays.asList("Pending", "Approved", "Denied");
	List<String> allowedFileTypes = Arrays.asList("image/jpeg", "image/png", "image/gif");
	List<String> reimbType = Arrays.asList("Lodging", "Travel", "Food", "Other");

	// Constructor
	public ReimbursementService() {
		this.reimbDao = new ReimbursementDAO();
	}

	// getReimbursements
	public List<Reimbursement> getReimbursements(User currentlyLoggedInUser) throws SQLException, ParseException {
		logger.info("ReimbursementService.getReimbursements() invoked");

		List<Reimbursement> reimbursements = null;

		/*-
		 * 	Possibilities
		 * 	1. logged in user is a finance manager
		 * 	2. logged in user is an employee
		 */

		// 1.
		if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.FINANCE_MANAGER)) {
			logger.info("user is a finance manager");

			reimbursements = this.reimbDao.getAllReimbursements();

			// 2.
		} else if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.EMPLOYEE)) {
			logger.info("user is an employee");

			reimbursements = this.reimbDao.getReimbByUserId(currentlyLoggedInUser.getUserId());
		}

		return reimbursements;
	}

	// getReimbursementsByStatus
	public List<Reimbursement> getReimbursementsByStatus(User currentlyLoggedInUser, String statusRequested)
			throws SQLException, StatusNotFoundException {
		logger.info("ReimbursementService.getReimbursementsByStatus() invoked");

		List<Reimbursement> reimbursements = null;

		/*-
		 * 	Possibilities
		 * 	1. logged in user is a finance manager
		 * 	2. logged in user is an employee
		 */

		// 1.

		if (statusRequested != null) {
			statusRequested = statusRequested.substring(0, 1).toUpperCase() + statusRequested.substring(1);

		}

		if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.FINANCE_MANAGER)) {
			logger.info("user is a finance manager");

			/*
			 * statusRequested possibilities 1. status is null 2. status is no
			 * null
			 */
			if (statusRequested == null || !validStatusType.contains(statusRequested)) {
				logger.info("status is null");

				throw new StatusNotFoundException("Status not found.");

			} else if (statusRequested != null) {
				logger.info("status is not null");

				reimbursements = this.reimbDao.getReimbursementsByStatus(statusRequested);

			}

			// 2.
		} else if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.EMPLOYEE)) {
			logger.info("usre is an employee");

			reimbursements = this.reimbDao.getReimbByUserId(currentlyLoggedInUser.getUserId());
		}

		return reimbursements;
	}

	// addReimbursement
	public Reimbursement addReimbursement(User currentlyLoggedInUser, String amount, String type, String description,
			String mimeType, InputStream receipt) throws InvalidParameterException, SQLException {
		logger.info("ReimbursementService.addReimbursement() invoked");

		// amount
		Double amountReimb = Double.parseDouble(amount);
		if (amountReimb == 0 || amountReimb < 0) {
			throw new InvalidParameterException("Amount cannot be equal or less than 0.");
		}

		// status
		String status = "Pending";

		// capitalized type
		if (type != null) {
			type = type.substring(0, 1).toUpperCase() + type.substring(1);
			// validate type
		} else if (type == null || !reimbType.contains(type)) {
			throw new InvalidParameterException(
					"The type of reimbursement must be identified and be either 'Lodging', 'Travel', 'Food', 'Other'.");
		}

		// description
		if (description == null) {
			throw new InvalidParameterException("Please describe the reimbursement being requested.");
		}

//		// receipt file null - does not work
//		if (mimeType == null) {
//			throw new InvalidParameterException("Image of the reciept must be uploaded.");
//		}

		// receipt file
		if (!allowedFileTypes.contains(mimeType)) {
			throw new InvalidParameterException(
					"Receipt image must be uploaded and can only be PNG, JPEG, or GIF file.");
		}

		// set userId that logged in to 'authorId'
		int authorId = currentlyLoggedInUser.getUserId();

		Reimbursement addedReimbursement = this.reimbDao.addReimbursement(amountReimb, status, type, description,
				receipt, authorId);

		return addedReimbursement;
	}

	// getRecieptByReimbursementId
	public InputStream getRecieptByReimbursementId(User currentlyLoggedInUser, String reimbursementId)
			throws SQLException, UnauthorizedException, ReimbursementReceiptNotFoundException {
		logger.info("ReimbursementService.getRecieptByReimbursementId() invoked");

		int reimbId = Integer.parseInt(reimbursementId);

		/*-
		 *  Business logic
		 *  1. finance manager can view any images that belong to anyone
		 *  2. employee can only view images for reimb belong to them
		 */

		// 1.
		if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.EMPLOYEE)) {
			logger.info("usre is an employee");

			int userId = currentlyLoggedInUser.getUserId();
			List<Reimbursement> reimbursementsBelongToEmployee = this.reimbDao.getReimbByUserId(userId);

			Set<Integer> reimbIdsEncountered = new HashSet<>();
			for (Reimbursement r : reimbursementsBelongToEmployee) {
				reimbIdsEncountered.add(r.getReimbId());
			}

			// check if the image belong to the user
			if (!reimbIdsEncountered.contains(reimbId)) {
				throw new UnauthorizedException("Unable to access reimbursement's receipt.");
			}
		}

		// grab the image form the DAO
		InputStream image = this.reimbDao.getRecieptByReimbursementId(reimbId);

		if (image == null) {
			throw new ReimbursementReceiptNotFoundException("Reciept was not found for reimbursement ID " + reimbId);
		}

		return image;
	}

	// updateReimbursement
	public Reimbursement updateReimbursement(User currentlyLoggedInUser, String reimbId, String status)
			throws SQLException, InvalidParameterException, UnauthorizedException, ParseException {
		logger.info("ReimbursementService.updateReimbursement() invoked");

		int reimbursementId = Integer.parseInt(reimbId);

		/*-
		 *  Authorization
		 *  1. FM
		 *  2. employee
		 */

		// 1.
		if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.FINANCE_MANAGER)) {
			logger.info("user is a finance manager");

			this.reimbDao.getAllReimbursements();

			// 2.
		} else if (currentlyLoggedInUser.getUserRole().equals(UserRoleConstants.EMPLOYEE)) {
			logger.info("user is an employee");

			throw new UnauthorizedException("Must be logged in as finance manager to access.");
		}

		Reimbursement reimbursement = this.reimbDao.getReimbByReimbId(reimbursementId);

		logger.debug("rembid {}", reimbursementId);

		/*-
		 * 	STATUS Possibilities
		 * 	1. can update status but wrong status
		 * 	2. can update status, correct status type
		 * 	3. cant' update status, status has already been updated
		 */

		// change status to upper case
		if (status != null) {
			status = status.substring(0, 1).toUpperCase() + status.substring(1);
		}

		// 1.
		if (!validStatusType.contains(status)) {
			logger.info("invalid status {}", status);

			throw new InvalidParameterException("Status must be either 'Approved' or 'Denied'.");
		}

		// 2.
		if (reimbursement.getStatus().equals("Pending")) {
			logger.info("correct status");

			this.reimbDao.updateReimbursement(reimbursementId, status, currentlyLoggedInUser.getUserId());

			reimbursement = this.reimbDao.getReimbByReimbId(reimbursementId);

			// 3.
		} else {
			logger.info("reimbursment has already been updated");

			throw new InvalidParameterException("Unable to update an already updated reimbursement.");

		}

		/*-
		 *  RESOLVERID
		 */

		return reimbursement;
	}

	// verifyReimbursement
	public void verifyReimbursement(String reimbursementId)
			throws ReimbursementNotFoundException, InvalidParameterException, SQLException {
		logger.info("ReimbursementService.verifyReimbursement() invoked");

		try {

			int reimbId = Integer.parseInt(reimbursementId);

			Reimbursement reimbursement = this.reimbDao.getReimbByReimbId(reimbId);

			/*-
			 * 	Possibilities
			 * 	1. reimbursement does not exist
			 * 	2. reimbursement exist
			 */

			// 1.
			if (reimbursement == null) {
				logger.info("reimb does not exist");

				throw new ReimbursementNotFoundException("Reimbursement with ID " + reimbId + " was not found.");

				// 2.
			} else {
				logger.info("reimb exist");
			}

		} catch (NumberFormatException e) {
			logger.info("Client ID provided is not an int convertable value.");

			throw new InvalidParameterException("Client ID provided is not an int convertable value.");
		}

	}

	public void verifyAddReimb(String amount, String type, String description, UploadedFile file)
			throws InvalidParameterException {

		// building String dynamically
		
		boolean errorBoolean = false;

		StringBuilder userErrorString = new StringBuilder();

		if (StringUtils.isBlank(amount)) {
			userErrorString.append("Amount");
			errorBoolean = true;

		}
		if (StringUtils.isBlank(type)) {
			if (errorBoolean) {
				userErrorString.append(", type");
				errorBoolean = true;
			} else {
				userErrorString.append("Type");
				errorBoolean = true;
			}
		}
		if (StringUtils.isBlank(description)) {
			if (errorBoolean) {
				userErrorString.append(", description");
				errorBoolean = true;
			} else {
				userErrorString.append("Description");
				errorBoolean = true;
			}
		}
		if (file == null) {
			if (errorBoolean) {
				userErrorString.append(", receipt");
				errorBoolean = true;
			} else {
				userErrorString.append("Receipt");
				errorBoolean = true;
			}
		}

		if (errorBoolean) {
			userErrorString.append(" cannot be blank.");
			
			throw new InvalidParameterException(userErrorString.toString()); 
		}

//		if (StringUtils.isBlank(amount) && StringUtils.isBlank(type) && StringUtils.isBlank(description)) {
//			throw new InvalidParameterException("Field above cannot be blank and receipt image must be uploaded.");
//		}
//		
//		if (StringUtils.isBlank(amount)) {
//			throw new InvalidParameterException("Field above cannot be blank and receipt image must be uploaded.");
//		}
//		if (StringUtils.isBlank(type)) {
//			throw new InvalidParameterException("Field above cannot be blank and receipt image must be uploaded.");
//		}
//		if (StringUtils.isBlank(description)) {
//			throw new InvalidParameterException("Field above cannot be blank and receipt image must be uploaded.");
//		}
	}
}
