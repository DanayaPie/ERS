package com.revature.service;

import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.util.List;

import javax.security.auth.login.FailedLoginException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.revature.dao.UserDAO;
import com.revature.exception.InvalidParameterException;
import com.revature.model.User;
import com.revature.utility.HashUtil;
import com.revature.utility.ValidateUtil;

public class UserService {

	private Logger logger = LoggerFactory.getLogger(UserService.class);

	private UserDAO userDao;

	// constructor
	public UserService() {
		super();
		this.userDao = new UserDAO();
	}

	// get user by username and password
	public User getUserByUsernameAndPassword(String username, String password)
			throws SQLException, FailedLoginException {
		logger.info("UserService.getUserByUsernameAndPassword() invoked");

		User user = this.userDao.getUserByUsernameAndPassword(username, password);

		if (user == null) {
			throw new FailedLoginException("Incorrect username and/or password");
		}

		return user;

	}

	// sign up
	public User signUp(User user) throws InvalidParameterException, SQLException, NoSuchAlgorithmException {
		logger.info("UserService.signUp() invoked");

		user.setFirstName(user.getFirstName().trim());
		user.setLastName(user.getLastName().trim());
		user.setUsername(user.getUsername().trim());
		user.setPassword(user.getPassword().trim());
		user.setEmail(user.getEmail().trim());
		user.setUserRole(user.getUserRole().trim());
		
		// hashing username and password
		String algorithm = "SHA-256";
		byte[] salt = HashUtil.createSalt();
		
		String hashedUsername = HashUtil.hashUsername(user.getUsername().trim(), algorithm, salt);
		String hashedPassword = HashUtil.hashPassword(user.getPassword().trim(), algorithm, salt);
			

		User addedUser = this.userDao.signUp(user);
		return addedUser;
	}

	// get username
	public List<User> getUserByUsernameAndEmail(String username, String email) throws SQLException {
		logger.info("UserService.getUserByUsernameAndEmail() invoked");

		List<User> users = this.userDao.getUserByUsername(username, email);	
		
		return users;
	}
}
